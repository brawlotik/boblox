local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")

local platforms = {}
local spawnDuration = 600 -- 10 минут в секундах
local startTime = tick()
local maxPlatforms = 10
local platformSize = Vector3.new(5, 1, 5)
local spawnOffset = Vector3.new(0, -3, 0)
local spawnInterval = 0.1

local teleportTarget = Vector3.new(-1678, 5, 2796)
local teleportSpeed = 10
local reachedTarget = false -- Флаг для остановки спавна

local function spawnPlatform()
    if reachedTarget or tick() - startTime >= spawnDuration then return end

    local platform = Instance.new("Part")
    platform.Size = platformSize
    platform.Position = RootPart.Position + spawnOffset
    platform.Anchored = true
    platform.Transparency = 1
    platform.CanCollide = true
    platform.Parent = workspace

    table.insert(platforms, platform)
    
    if #platforms > maxPlatforms then
        platforms[1]:Destroy()
        table.remove(platforms, 1)
    end
end

task.spawn(function()
    local lastSpawnTime = tick()
    while not reachedTarget and tick() - startTime < spawnDuration do
        if tick() - lastSpawnTime >= spawnInterval then
            spawnPlatform()
            lastSpawnTime = tick()
        end
        task.wait()
    end
end)

local function smoothTeleport(target)
    if not RootPart then return end

    local distance = (RootPart.Position - target).Magnitude
    local duration = distance / teleportSpeed
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(RootPart, tweenInfo, {CFrame = CFrame.new(target)})

    tween:Play()

    -- Ждем завершения телепорта
    tween.Completed:Wait()

    -- Проверяем, находится ли игрок вблизи целевой позиции
    if math.abs(RootPart.Position.X - target.X) < 1 and 
       math.abs(RootPart.Position.Y - target.Y) < 1 and 
       math.abs(RootPart.Position.Z - target.Z) < 1 then
        reachedTarget = true -- Останавливаем цикл
        print("Целевая точка достигнута! Спавн плит остановлен.")
    end
end

smoothTeleport(teleportTarget)

local repetitions = 5  -- Количество повторений

for i = 1, repetitions do
    game:GetService("ReplicatedStorage"):FindFirstChild("3ZJ"):FindFirstChild("057dbba8-6870-4a8d-a525-f89ed5cb3bfc"):FireServer("Patrol Police")
    task.wait(1)
end

for i = 1, repetitions do
    game:GetService("ReplicatedStorage").W2k:FindFirstChild("1289a55e-6af1-4481-b43d-6633a8e28351"):FireServer("Patrol Police")
    task.wait(1)
end

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")

local platforms = {}
local spawnDuration = 600 -- 10 минут в секундах
local startTime = tick()
local maxPlatforms = 10
local platformSize = Vector3.new(5, 1, 5)
local spawnOffset = Vector3.new(0, -3, 0)
local spawnInterval = 0.1

local teleportTarget = Vector3.new(-1684, 5, 2854)
local teleportSpeed = 10
local reachedTarget = false -- Флаг для остановки спавна

local function spawnPlatform()
    if reachedTarget or tick() - startTime >= spawnDuration then return end

    local platform = Instance.new("Part")
    platform.Size = platformSize
    platform.Position = RootPart.Position + spawnOffset
    platform.Anchored = true
    platform.Transparency = 1
    platform.CanCollide = true
    platform.Parent = workspace

    table.insert(platforms, platform)
    
    if #platforms > maxPlatforms then
        platforms[1]:Destroy()
        table.remove(platforms, 1)
    end
end

task.spawn(function()
    local lastSpawnTime = tick()
    while not reachedTarget and tick() - startTime < spawnDuration do
        if tick() - lastSpawnTime >= spawnInterval then
            spawnPlatform()
            lastSpawnTime = tick()
        end
        task.wait()
    end
end)

local function smoothTeleport(target)
    if not RootPart then return end

    local distance = (RootPart.Position - target).Magnitude
    local duration = distance / teleportSpeed
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(RootPart, tweenInfo, {CFrame = CFrame.new(target)})

    tween:Play()

    -- Ждем завершения телепорта
    tween.Completed:Wait()

    -- Проверяем, находится ли игрок вблизи целевой позиции
    if math.abs(RootPart.Position.X - target.X) < 1 and 
       math.abs(RootPart.Position.Y - target.Y) < 1 and 
       math.abs(RootPart.Position.Z - target.Z) < 1 then
        reachedTarget = true -- Останавливаем цикл
        print("Целевая точка достигнута! Спавн плит остановлен.")
    end
end

smoothTeleport(teleportTarget)
